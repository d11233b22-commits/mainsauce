local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")

LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(0.1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

local Window = Fluent:CreateWindow({
    Title = "‚ú®Mojito Hub Lite 1.1‚ú®",
    TabWidth = 100,
    Size = UDim2.fromOffset(550, 420),
    Acrylic = true,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.Q,
})

local Tabs = {
    Main = Window:AddTab({ Title = "üè° Main", Icon = "" }),
    Resources = Window:AddTab({ Title = "üì¶ Resources", Icon = "" }),
    Player = Window:AddTab({ Title = "üéÆ Player", Icon = "" }),
    Group = Window:AddTab({ Title = "üë• Group", Icon = "" }),
    Misc = Window:AddTab({ Title = "ü§ù Misc", Icon = "" }),
    Children = Window:AddTab({ Title = "üë®‚Äçüëß‚Äçüë¶ Children", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("MojitoHub")
SaveManager:SetFolder("MojitoHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

local MainTab = Tabs.Main
Window:SelectTab(1)

Tabs.Main:AddButton({
    Title = "üî• Teleport to Campfire",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local fire = workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire"):WaitForChild("InnerTouchZone")
        local offset = Vector3.new(0, 15, 0)
        hrp.CFrame = CFrame.new(fire.Position + offset)
    end
})

Tabs.Main:AddButton({
    Title = "üè∞ Teleport to Stronghold",
    Callback = function()
        local plr = game:GetService("Players").LocalPlayer
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")

        local stronghold = workspace:FindFirstChild("Map")
            and workspace.Map:FindFirstChild("Landmarks")
            and workspace.Map.Landmarks:FindFirstChild("Stronghold")

        if stronghold then
            local pos = stronghold:IsA("Model") and stronghold:GetPivot().Position or stronghold.Position
            hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
        end
    end
})

MainTab:AddButton({
    Title = "üåã Teleport to Volcano",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local LocalPlayer = game.Players.LocalPlayer

        local volcano
        repeat
            volcano = Workspace:FindFirstChild("Map")
                and Workspace.Map:FindFirstChild("Landmarks")
                and Workspace.Map.Landmarks:FindFirstChild("Volcano")
            task.wait(0.5)
        until volcano

        local altarFolder
        repeat
            altarFolder = volcano:FindFirstChild("Functional")
                and volcano.Functional:FindFirstChild("Sacrifice")
                and volcano.Functional.Sacrifice:FindFirstChild("Altar")
            task.wait(0.5)
        until altarFolder

        local platform = altarFolder:FindFirstChildWhichIsA("BasePart")
        if not platform then return end

        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.Velocity = Vector3.new(0,0,0)
        hrp.RotVelocity = Vector3.new(0,0,0)
        hrp.CFrame = platform.CFrame + Vector3.new(0,3,0)
    end
})

Tabs.Main:AddButton({
    Title = "‚öíÔ∏è Teleport to Anvil",
    Callback = function()
        local Players = game:GetService("Players")
        local Workspace = game:GetService("Workspace")

        local LocalPlayer = Players.LocalPlayer
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        local Map = Workspace:FindFirstChild("Map")
        local Landmarks = Map and Map:FindFirstChild("Landmarks")

        local anvil
        local timeout = 10
        local start = tick()

        while tick() - start < timeout do
            if Landmarks then
                anvil = Landmarks:FindFirstChild("ToolWorkshop") or Landmarks:FindFirstChild("ToolWorkshop_MeteorShower")
                if anvil then break end
            end
            task.wait(0.5)
        end

        if anvil then
            local mainPart = anvil:FindFirstChild("Main")
            if mainPart then
                hrp.CFrame = CFrame.new(mainPart.Position + Vector3.new(0, 50, 0))
            else
                warn("ToolWorkshop exists but has no Main part")
            end
        else
            warn("ToolWorkshop not found in Landmarks")
        end
    end
})

Tabs.Main:AddButton({
    Title = "üå± Campfire Trees",
    Callback = function()
        local RS = game:GetService("ReplicatedStorage")
        local Workspace = game:GetService("Workspace")

        local saplingRadius = 83
        local spacing = 2.5

        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local mainFire = workspace.Map.Campground.MainFire:WaitForChild("InnerTouchZone")

        local startDrag = RS.RemoteEvents:WaitForChild("RequestStartDraggingItem")
        local plantRemote = RS.RemoteEvents:WaitForChild("RequestPlantItem")

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        local function isSapling(item)
            return item.Name:find("Sapling")
        end

        local function getGroundY(position)
            local rayOrigin = position + Vector3.new(0,50,0)
            local rayDirection = Vector3.new(0,-100,0)
            local raycastResult = workspace:Raycast(rayOrigin, rayDirection)
            if raycastResult then
                return raycastResult.Position.Y
            else
                return position.Y
            end
        end

        local function distributeSaplingsUltraFast()
            if not mainFire then return end

            local saplings = {}
            for _, item in ipairs(itemsFolder:GetChildren()) do
                if isSapling(item) then
                    table.insert(saplings, item)
                end
            end

            local availableCount = #saplings
            if availableCount == 0 then return end

            local circumference = 2 * math.pi * saplingRadius
            local maxSaplings = math.floor(circumference / spacing)
            local countToPlant = math.min(availableCount, maxSaplings)
            local center = mainFire.Position
            local angleStep = (2 * math.pi) / countToPlant

            local positions = {}
            for i = 0, countToPlant-1 do
                local angle = i * angleStep
                local x = center.X + saplingRadius * math.cos(angle)
                local z = center.Z + saplingRadius * math.sin(angle)
                local y = getGroundY(Vector3.new(x,0,z))
                table.insert(positions, Vector3.new(x,y,z))
            end

            for i = 1, countToPlant do
                local sapling = saplings[i]
                local targetPos = positions[i]
                local part = getPart(sapling)
                if part then
                    if sapling:IsA("Model") then
                        sapling:PivotTo(CFrame.new(targetPos))
                    else
                        part.CFrame = CFrame.new(targetPos)
                    end
                end
            end

            for i = 1, countToPlant do
                local sapling = saplings[i]
                local pos = positions[i]
                task.spawn(function()
                    startDrag:FireServer(sapling)
                    plantRemote:InvokeServer(sapling, pos)
                end)
            end
        end

        distributeSaplingsUltraFast()
    end
})

Tabs.Main:AddButton({
    Title = "‚öîÔ∏è Bring Equipments",
    Callback = function()
        local Players = game:GetService("Players")
        local Workspace = game:GetService("Workspace")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local LocalPlayer = Players.LocalPlayer

        local hrp = (LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local function getPart(item)
            return item:IsA("BasePart") and item
                or item.PrimaryPart
                or item:FindFirstChildWhichIsA("BasePart")
        end

        local allTargets = {
            "Leather Body", "Iron Body", "Thorn Body", "Alien Armour",
            "Spear","Morningstar","Katana","Laser Sword","Ice Sword","Trident","Poison Spear","Infernal Sword","Cultist King Mace",
            "Good Axe","Strong Axe","Chainsaw",
            "Good Sack","Giant Sack","Infernal Sack"
        }

        local maxPerItem = 5
        local spacing = 3
        local slotOffsets = {-spacing*2, -spacing, 0, spacing, spacing*2}
        local slotIndex = 1
        local itemCounts = {}

        for _, item in ipairs(itemsFolder:GetChildren()) do
            for _, name in ipairs(allTargets) do
                if item.Name:find(name) then
                    itemCounts[name] = itemCounts[name] or 0
                    if itemCounts[name] < maxPerItem then
                        local part = getPart(item)
                        if part then
                            local right = hrp.CFrame.RightVector
                            local targetPos = hrp.Position + right * slotOffsets[slotIndex]

                            if item:IsA("Model") then
                                item:PivotTo(CFrame.new(targetPos))
                            else
                                part.CFrame = CFrame.new(targetPos)
                            end

                            task.spawn(function()
                                pcall(function()
                                    startDrag:FireServer(item)
                                    task.wait(0.1)
                                    stopDrag:FireServer(item)
                                    task.wait(0.1)
                                end)
                                pcall(function()
                                    startDrag:FireServer(item)
                                    task.wait(0.1)
                                    stopDrag:FireServer(item)
                                end)
                            end)

                            itemCounts[name] += 1
                            slotIndex += 1
                            if slotIndex > #slotOffsets then slotIndex = 1 end
                        end
                    end
                end
            end
        end
    end
})

MainTab:AddButton({
    Title = "üî´ Bring Guns & Ammo",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local RepStorage = game:GetService("ReplicatedStorage")
        local plr = Players.LocalPlayer
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")

        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local guns = {
            ["Ray Gun"] = true, Revolver = true, Rifle = true, ["Tactical Shotgun"] = true,
            ["Laser Cannon"] = true, ["Blow Pipe"] = true, Crossbow = true,
            ["Infernal Crossbow"] = true, Flamethrower = true
        }
        local ammo = {
            ["Revolver Ammo"] = true, ["Rifle Ammo"] = true,
            ["Shotgun Ammo"] = true, ["Fuel Canister"] = true,
            Kunai = true, ["Frozen Shuriken"] = true,
            Snowball = true, Wildfire = true
        }

        local maxPerGun = 5
        local gunCounts = {}
        local spacing = 4
        local slotOffsets = {
            Vector3.new(-spacing*2, 0, 0),
            Vector3.new(-spacing, 0, 0),
            Vector3.new(0, 0, 0),
            Vector3.new(spacing, 0, 0),
            Vector3.new(spacing*2, 0, 0),
        }
        local slotIndex = 1

        local function getPart(item)
            return item:IsA("BasePart") and item
                or item.PrimaryPart
                or item:FindFirstChildWhichIsA("BasePart")
        end

        local function dropItem(item)
            local part = getPart(item)
            if not part then return end
            local right = hrp.CFrame.RightVector
            local offset = slotOffsets[slotIndex]
            local targetPos = hrp.Position + right * offset.X + Vector3.new(0, offset.Y, 0)

            if item:IsA("Model") then
                item:PivotTo(CFrame.new(targetPos))
            else
                part.CFrame = CFrame.new(targetPos)
            end

            task.spawn(function()
                pcall(function()
                    startDrag:FireServer(item)
                    task.wait(0.1)
                    stopDrag:FireServer(item)
                    task.wait(0.1)
                end)
                pcall(function()
                    startDrag:FireServer(item)
                    task.wait(0.1)
                    stopDrag:FireServer(item)
                end)
            end)

            slotIndex += 1
            if slotIndex > #slotOffsets then slotIndex = 1 end
        end

        for _, item in ipairs(itemsFolder:GetChildren()) do
            local itemName = item.Name

            if guns[itemName] then
                gunCounts[itemName] = gunCounts[itemName] or 0
                if gunCounts[itemName] < maxPerGun then
                    dropItem(item)
                    gunCounts[itemName] += 1
                end
            elseif ammo[itemName] then
                dropItem(item)
            end
        end
    end
})


local ResourcesTab = Tabs.Resources


local function bringItemsInFront(plr, itemNames, maxCount, ignoreList, dropPos)
    local itemsFolder = workspace:WaitForChild("Items")
    local RE = game.ReplicatedStorage.RemoteEvents.RequestStartDraggingItem
    local StopRE = game.ReplicatedStorage.RemoteEvents.StopDraggingItem

    local count = 0
    for _, item in pairs(itemsFolder:GetChildren()) do
        if count >= maxCount then break end

        local ignored = false
        if ignoreList then
            for _, bad in ipairs(ignoreList) do
                if item.Name:match(bad) then
                    ignored = true
                    break
                end
            end
        end
        if ignored then continue end

        local match = false
        for _, word in ipairs(itemNames) do
            if word == item.Name or item.Name:lower():find(word:lower()) then
                match = true
                break
            end
        end

        if match then
            local part = item:IsA("BasePart") and item
                or item.PrimaryPart
                or item:FindFirstChildWhichIsA("BasePart")
            if part then
                local pos = (dropPos or plr.Character.HumanoidRootPart.Position) 
                            + Vector3.new(0, 2 + (count * 2), 0)
                if item:IsA("Model") then
                    item:PivotTo(CFrame.new(pos))
                else
                    part.CFrame = CFrame.new(pos)
                end
                RE:FireServer(item)
                task.wait(0.1)
                StopRE:FireServer(item)
                count += 1
            end
        end
    end
end

local BringLogs = ResourcesTab:AddToggle("BringLogs", {
    Title = "Bring Logs to Scrapper",
    Default = false
})
BringLogs:OnChanged(function(Value)
    _G.BringLogsEnabled = Value
    if Value then
        task.spawn(function()
            local scrapper = workspace.Map.Campground:FindFirstChild("Scrapper")
            while _G.BringLogsEnabled and scrapper do
                local plr = game.Players.LocalPlayer
                bringItemsInFront(plr, {"log"}, 20, {"Blueprint"}, scrapper:GetPivot().Position + Vector3.new(-2.5,0,0))
                task.wait(0.5)
            end
        end)
    end
end)

local BringMaterials = ResourcesTab:AddToggle("BringMaterials", {
    Title = "Bring Materials to Scrapper",
    Default = false
})
BringMaterials:OnChanged(function(Value)
    _G.BringMaterialsEnabled = Value
    if Value then
        task.spawn(function()
            local scrapper = workspace.Map.Campground:FindFirstChild("Scrapper")
            while _G.BringMaterialsEnabled and scrapper do
                local plr = game.Players.LocalPlayer
                bringItemsInFront(
                    plr,
                    {"Bolt","Sheet Metal","Broken Fan","Old Radio","Broken Microwave","Tyre","Old Car engine","Washing Machine","Cultist Gem"},
                    20,
                    {"Blueprint","Cultist Experiment","Cultist Prototype","Cultist King Antler","Cultist","Crossbow Cultist"},
                    scrapper:GetPivot().Position + Vector3.new(2.5,0,0)
                )
                task.wait(0.5)
            end
        end)
    end
end)

local BringFuel = ResourcesTab:AddToggle("BringFuel", {
    Title = "Bring Fuel to Campfire",
    Default = false
})

BringFuel:OnChanged(function(Value)
    _G.BringFuelEnabled = Value
    if Value then
        task.spawn(function()
            local mainFire = workspace:WaitForChild("Map")
                :WaitForChild("Campground")
                :WaitForChild("MainFire")
                :WaitForChild("InnerTouchZone")

            if not mainFire then return end

            while _G.BringFuelEnabled and mainFire do
                local plr = game.Players.LocalPlayer
                bringItemsInFront(
                    plr,
                    {"Coal","Fuel Canister","Oil Barrel","Biofuel"},
                    10,
                    nil,
                    mainFire.Position + Vector3.new(0, 10, 0) 
                )
                task.wait(0.5)
            end
        end)
    end
end)

ResourcesTab:AddButton({
    Title = "Bring Logs",
    Callback = function()
        local plr = game.Players.LocalPlayer
        bringItemsInFront(plr, {"log"}, 5, {"Blueprint"})
    end
})

ResourcesTab:AddButton({
    Title = "Bring Materials",
    Callback = function()
        local plr = game.Players.LocalPlayer
        bringItemsInFront(
            plr,
            {"Bolt","Sheet Metal","Broken Fan","Old Radio","Broken Microwave","Tyre","Old Car engine","Washing Machine","Cultist Gem"},
            5,
            {"Blueprint","Cultist Experiment","Cultist Prototype","Cultist King Antler","Cultist","Crossbow Cultist"}
        )
    end
})

ResourcesTab:AddButton({
    Title = "Bring Fuel",
    Callback = function()
        local plr = game.Players.LocalPlayer
        bringItemsInFront(plr, {"Coal","Fuel Canister","Oil Barrel","Biofuel"}, 5, nil)
    end
})

local Players = game:GetService("Players")
local RepStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local collectCoinsEvent = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestCollectCoints")
local chestEvent = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestOpenItemChest")
local itemsFolder = Workspace:WaitForChild("Items")

local connections = {}
local processedCoins = {}
local processedChests = {}
local PlayerTab = Tabs.Player
_G.GlobalHitCount = 0

PlayerTab:AddToggle("FullbrightToggle", {
    Title = "Clearview",
    Default = false
}):OnChanged(function(state)
    local Lighting = game:GetService("Lighting")
    local OriginalLighting = {
        Brightness = Lighting.Brightness,
        ClockTime = Lighting.ClockTime,
        FogEnd = Lighting.FogEnd,
        GlobalShadows = Lighting.GlobalShadows,
        Ambient = Lighting.Ambient
    }

    _G.FullbrightConnection = _G.FullbrightConnection or nil

    if state then
        Lighting.Brightness = 2
        Lighting.ClockTime = 14
        Lighting.FogEnd = 100000
        Lighting.GlobalShadows = false
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)

        _G.FullbrightConnection = Lighting.Changed:Connect(function()
            if not _G.FullbrightEnabled then return end
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
            Lighting.GlobalShadows = false
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        end)

        _G.FullbrightEnabled = true
    else
        _G.FullbrightEnabled = false

        if _G.FullbrightConnection then
            _G.FullbrightConnection:Disconnect()
            _G.FullbrightConnection = nil
        end

        Lighting.Brightness = OriginalLighting.Brightness
        Lighting.ClockTime = OriginalLighting.ClockTime
        Lighting.FogEnd = OriginalLighting.FogEnd
        Lighting.GlobalShadows = OriginalLighting.GlobalShadows
        Lighting.Ambient = OriginalLighting.Ambient
    end
end)


local WindwalkToggle = PlayerTab:AddToggle("Windwalk",{Title="Windwalk", Default=false})
WindwalkToggle:OnChanged(function(state)
    local defaultSpeed=16
    local function applySpeed(char)
        local humanoid=char:FindFirstChildOfClass("Humanoid")
        if humanoid then humanoid.WalkSpeed=state and 80 or defaultSpeed end
    end
    if state then
        applySpeed(LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait())
        connections.windwalkHeartbeat=RunService.Heartbeat:Connect(function()
            local char=LocalPlayer.Character
            if char then applySpeed(char) end
        end)
        connections.windwalkRespawn=LocalPlayer.CharacterAdded:Connect(function(char)
            task.wait(0.1)
            if state then applySpeed(char) end
        end)
        connections.windwalkJump=UserInputService.JumpRequest:Connect(function()
            local char=LocalPlayer.Character
            if char then local h=char:FindFirstChildOfClass("Humanoid")
                if h then h:ChangeState(Enum.HumanoidStateType.Jumping) end
            end
        end)
    else
        if connections.windwalkHeartbeat then connections.windwalkHeartbeat:Disconnect() connections.windwalkHeartbeat=nil end
        if connections.windwalkRespawn then connections.windwalkRespawn:Disconnect() connections.windwalkRespawn=nil end
        if connections.windwalkJump then connections.windwalkJump:Disconnect() connections.windwalkJump=nil end
        local char=LocalPlayer.Character
        if char then local h=char:FindFirstChildOfClass("Humanoid") if h then h.WalkSpeed=defaultSpeed end end
    end
end)

local KillToggle = PlayerTab:AddToggle("KillAura", {Title="Kill Aura", Default=false})
_G.KAuraEnabled = false
local KA_Delay, KA_Range, KA_MaxTargets, KA_LastAttack = 0.05, 200, 10, 0
local AllowedToolNames = {GenericAxe=true, GenericSword=true, Flamethrower=true, Chainsaw=true}
local ToolDamageObject = RepStorage:FindFirstChild("RemoteEvents") and RepStorage.RemoteEvents:FindFirstChild("ToolDamageObject") or RepStorage:FindFirstChild("ToolDamageObject")
local KA_IsFunction = ToolDamageObject and ToolDamageObject:IsA("RemoteFunction")

KillToggle:OnChanged(function(value) _G.KAuraEnabled = value end)

RunService.Heartbeat:Connect(function(dt)
    if not _G.KAuraEnabled then return end
    KA_LastAttack += dt
    if KA_LastAttack < KA_Delay then return end
    KA_LastAttack = 0
    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local p = hrp.Position
    local wsChar = Workspace:FindFirstChild(LocalPlayer.Name)
    if not wsChar then return end
    local equippedName = wsChar:GetAttribute("Equipped")
    if not equippedName then return end
    local Inventory = LocalPlayer:FindFirstChild("Inventory")
    if not Inventory then return end
    local equippedTool = Inventory:FindFirstChild(equippedName)
    if not equippedTool then return end
    local toolNameAttr = equippedTool:GetAttribute("ToolName")
    if not toolNameAttr or not AllowedToolNames[toolNameAttr] then return end
    local targets = {}
    local charContainer = Workspace:FindFirstChild("Characters")
    local searchList = charContainer and charContainer:GetChildren() or Workspace:GetChildren()
    for _, v in pairs(searchList) do
        if v ~= char and v:IsA("Model") then
            local part = v:FindFirstChild("HumanoidRootPart") or v:FindFirstChild("Head")
            if part and (part.Position - p).Magnitude <= KA_Range then
                table.insert(targets, {char=v, part=part, dist=(part.Position - p).Magnitude})
            end
        end
    end
    if #targets == 0 then return end
    table.sort(targets,function(a,b) return a.dist<b.dist end)
    for i=1, math.min(KA_MaxTargets,#targets) do
        local target = targets[i]
        task.spawn(function()
            _G.GlobalHitCount += 1
            local actionId = tostring(_G.GlobalHitCount).."_7150927273"
            if KA_IsFunction then
                ToolDamageObject:InvokeServer(target.char, equippedTool, actionId, target.part.CFrame)
            else
                ToolDamageObject:FireServer(target.char, equippedTool, actionId, target.part.CFrame)
            end
        end)
    end
end)

local ChopToggle = PlayerTab:AddToggle("ChopAura", {Title="Chop Aura", Default=false})
_G.cAuraEnabled = false
local ChopRange, ChopRate = 500, 0.02
local damageEvent = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("ToolDamageObject")
local activeTreeTasks = {}

local function getAxe()
    local inv = LocalPlayer:FindFirstChild("Inventory")
    if not inv then return end
    for _, tool in ipairs(inv:GetChildren()) do
        local toolName = tool:GetAttribute("ToolName")
        if toolName == "GenericAxe" or toolName == "Chainsaw" then
            return tool
        end
    end
end

ChopToggle:OnChanged(function(value)
    _G.cAuraEnabled = value
end)

task.spawn(function()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    while true do
        if _G.cAuraEnabled then
            local axe = getAxe()
            if axe then
                for _, map in ipairs(Workspace:GetChildren()) do
                    local foliage = map:FindFirstChild("Foliage")
                    local landmarks = map:FindFirstChild("Landmarks")
                    local treeContainers = {}
                    if foliage then table.insert(treeContainers, foliage) end
                    if landmarks then table.insert(treeContainers, landmarks) end

                    for _, container in ipairs(treeContainers) do
                        for _, tree in ipairs(container:GetChildren()) do
                            if not tree or not tree.Parent then continue end
                            local trunk = tree:FindFirstChild("Trunk") or tree.PrimaryPart
                            if not trunk then continue end
                            if (tree:GetAttribute("Health") or 1) <= 0 then continue end
                            local dist = (trunk.Position - hrp.Position).Magnitude
                            local name = tree.Name
                            local isTarget = name == "Small Tree" or name:find("TreeBig") or name == "Snowy Small Tree"
                            if dist <= ChopRange and isTarget then
                                if not activeTreeTasks[tree] then
                                    activeTreeTasks[tree] = true
                                    task.spawn(function()
                                        while _G.cAuraEnabled and tree and tree.Parent and (tree:GetAttribute("Health") or 1) > 0 and (trunk.Position - hrp.Position).Magnitude <= ChopRange do
                                            pcall(function()
                                                damageEvent:InvokeServer(tree, axe, tostring(tick()).."_7150927273", trunk.CFrame * CFrame.new(0,0,-2))
                                            end)
                                            task.wait(ChopRate)
                                        end
                                        activeTreeTasks[tree] = nil
                                    end)
                                end
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.1)
    end
end)

PlayerTab:AddToggle("AutoCollectCoins", {
    Title = "Auto-Collect All Coins",
    Default = false
}):OnChanged(function(state)
    if state then
        for _, coin in ipairs(itemsFolder:GetChildren()) do
            if coin.Name:match("Coin") and not processedCoins[coin] then
                processedCoins[coin] = true
                task.spawn(function()
                    collectCoinsEvent:InvokeServer(coin)
                end)
            end
        end

        connections.coinListener = itemsFolder.ChildAdded:Connect(function(child)
            if child.Name:match("Coin") and not processedCoins[child] then
                processedCoins[child] = true
                task.spawn(function()
                    collectCoinsEvent:InvokeServer(child)
                end)
            end
        end)
    else
        if connections.coinListener then
            connections.coinListener:Disconnect()
            connections.coinListener = nil
        end
        processedCoins = {}
    end
end)

local AutoChestsToggle = PlayerTab:AddToggle("AutoChests", {
    Title = "Auto-Open Chests",
    Default = false
})

AutoChestsToggle:OnChanged(function(state)
    if state then
        task.spawn(function()
            while AutoChestsToggle.Value do
                local character = LocalPlayer.Character
                local hrp = character and character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    local nearestChest
                    local nearestDistance = 500
                    for _, chest in ipairs(itemsFolder:GetChildren()) do
                        if chest.Name:match("Chest") and chest.Parent and not processedChests[chest] then
                            local chestPart = chest.PrimaryPart or chest:FindFirstChildWhichIsA("BasePart")
                            if chestPart then
                                local dist = (chestPart.Position - hrp.Position).Magnitude
                                if dist <= nearestDistance then
                                    nearestDistance = dist
                                    nearestChest = chest
                                end
                            end
                        end
                    end

                    if nearestChest and nearestChest.Parent then
                        local chestPart = nearestChest.PrimaryPart or nearestChest:FindFirstChildWhichIsA("BasePart")
                        if chestPart then
                            processedChests[nearestChest] = true
                            task.spawn(function()
                                task.wait(0.2)
                                chestEvent:FireServer(nearestChest)
                            end)
                            task.wait(0.5)
                        else
                            task.wait(0.2)
                        end
                    else
                        task.wait(0.5)
                    end
                else
                    task.wait(0.5)
                end
            end
        end)
    else
        processedChests = {}
    end
end)


local PlayerTab = Tabs.Player
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local PlayerESPEnabled = false
PlayerTab:AddToggle("PlayerESP", {
    Title = "ESP Players",
    Default = false
}):OnChanged(function(state)
    PlayerESPEnabled = state
end)

local function createBillboard(parent, name, color)
    if not parent or not parent:FindFirstChild("Head") then return end
    if parent.Head:FindFirstChild(name) then return end
    local billboard = Instance.new("BillboardGui")
    billboard.Name = name
    billboard.Adornee = parent.Head
    billboard.Size = UDim2.new(0, 120, 0, 50)
    billboard.AlwaysOnTop = true
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0
    label.TextScaled = true
    label.Text = parent.Name
    label.Parent = billboard
    billboard.Parent = parent.Head
    return label
end

local function removeBillboard(parent, name)
    local head = parent:FindFirstChild("Head")
    if head then
        local gui = head:FindFirstChild(name)
        if gui then gui:Destroy() end
    end
end

task.spawn(function()
    while true do
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                local char = plr.Character
                if char then
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if PlayerESPEnabled then
                        local label = createBillboard(char, "PlayerESP", Color3.new(0,1,0))
                        if label and humanoid then
                            label.Text = plr.Name.." | "..math.floor(humanoid.Health).."/"..math.floor(humanoid.MaxHealth)
                        end
                    else
                        removeBillboard(char, "PlayerESP")
                    end
                end
            end
        end
        task.wait(0.2)
    end
end)


local GroupTab = Tabs.Group

GroupTab:AddToggle("fAssistToggle", {
    Title = "fAssist",
    Default = false
}):OnChanged(function(state)
    _G.fAssistEnabled = state
    if state then
        task.spawn(function()
            local RepStorage = game:GetService("ReplicatedStorage")
            local RE = RepStorage:WaitForChild("RemoteEvents")
            local ItemsFolder = workspace:WaitForChild("Items")
            local Players = game:GetService("Players")
            local campfire = workspace.Map.Campground.MainFire:WaitForChild("InnerTouchZone")
            local RAW_FOODS = {"Morsel","Steak"}
            local COOKED_FOODS = {"Cooked Morsel","Cooked Steak"}
            local GRID_COLS, GRID_ROWS = 3, 2
            local CELL_SPACING = 3
            local STACK_HEIGHT = 1.5
            local ITEMS_PER_CELL = 2
            local COOKED_OFFSET = Vector3.new(0,0,25)
            local DROP_HEIGHT = 10
            local MAX_COOKED = 6
            local skippedItems = {}

            local function getPart(item)
                return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
            end

            local function getGroundY(pos)
                local ray = Ray.new(pos + Vector3.new(0,50,0), Vector3.new(0,-100,0))
                local part, hitPos = workspace:FindPartOnRay(ray)
                if hitPos then return hitPos.Y else return pos.Y end
            end

            local function markBaggedItems(player)
                local bag = player:FindFirstChild("ItemBag")
                if not bag then return end
                local function renameItem(item)
                    if item and (table.find(RAW_FOODS, item.Name) or table.find(COOKED_FOODS, item.Name)) then
                        pcall(function()
                            item.Name = item.Name .. "_bagged"
                        end)
                    end
                end
                for _, item in ipairs(bag:GetChildren()) do
                    renameItem(item)
                end
                bag.ChildAdded:Connect(renameItem)
                bag.ChildRemoved:Connect(renameItem)
            end

            for _, player in ipairs(Players:GetPlayers()) do
                markBaggedItems(player)
            end

            Players.PlayerAdded:Connect(function(player)
                player.CharacterAdded:Connect(function()
                    markBaggedItems(player)
                end)
            end)

            local function isAvailable(item)
                if not item or item.Parent ~= ItemsFolder then return false end
                if skippedItems[item] then return false end
                if string.find(item.Name, "_bagged") then return false end
                return true
            end

            local function teleportAndDrag(item, targetPos)
                local part = getPart(item)
                if not part then return end
                if item:IsA("Model") and not item.PrimaryPart then item.PrimaryPart = part end
                if item:IsA("Model") then
                    item:SetPrimaryPartCFrame(CFrame.new(targetPos))
                else
                    part.CFrame = CFrame.new(targetPos)
                end
                pcall(function()
                    RE.RequestStartDraggingItem:FireServer(item)
                    task.wait(0.1)
                    RE.StopDraggingItem:FireServer(item)
                    task.wait(0.1)
                end)
            end

            local function dropRaw(item, index)
                local targetPos = campfire.Position + Vector3.new(0, DROP_HEIGHT + STACK_HEIGHT*index,0)
                local groundY = getGroundY(targetPos)
                targetPos = Vector3.new(targetPos.X, math.max(targetPos.Y, groundY + 0.5), targetPos.Z)
                if (item.PrimaryPart.Position - targetPos).Magnitude < 1 then return end
                task.spawn(teleportAndDrag, item, targetPos)
            end

            local function stackCooked(item, cellIndex, stackIndex)
                local col = cellIndex % GRID_COLS
                local row = math.floor(cellIndex / GRID_COLS)
                local x = col * CELL_SPACING - (CELL_SPACING * (GRID_COLS-1)/2)
                local z = row * CELL_SPACING - (CELL_SPACING * (GRID_ROWS-1)/2)
                local yStack = stackIndex * STACK_HEIGHT
                local targetPos = campfire.Position + COOKED_OFFSET + Vector3.new(x, 3 + yStack, z)
                local groundY = getGroundY(targetPos)
                targetPos = Vector3.new(targetPos.X, math.max(targetPos.Y, groundY + 0.5), targetPos.Z)
                if (item.PrimaryPart.Position - targetPos).Magnitude < 1 then return end
                task.spawn(teleportAndDrag, item, targetPos)
            end

            local LAYOUT = {"M","M","M","S","S","S"}

            task.spawn(function()
                while _G.fAssistEnabled do
                    local cookedM = {}
                    local cookedS = {}

                    for _, item in ipairs(ItemsFolder:GetChildren()) do
                        if item.Name == "Cooked Morsel" and isAvailable(item) then
                            table.insert(cookedM, item)
                        elseif item.Name == "Cooked Steak" and isAvailable(item) then
                            table.insert(cookedS, item)
                        end
                    end

                    for _, rawName in ipairs(RAW_FOODS) do
                        local count = 0
                        for _, item in ipairs(ItemsFolder:GetChildren()) do
                            if item.Name == rawName and isAvailable(item) and count < MAX_COOKED then
                                dropRaw(item, count)
                                count += 1
                            end
                        end
                    end

                    for cellIndex = 0, 5 do
                        for stackIndex = 0, ITEMS_PER_CELL-1 do
                            local item
                            if LAYOUT[cellIndex+1] == "M" then
                                item = table.remove(cookedM, 1)
                                if not isAvailable(item) then
                                    for _, replacement in ipairs(ItemsFolder:GetChildren()) do
                                        if replacement.Name == "Cooked Morsel" and isAvailable(replacement) then
                                            item = replacement
                                            break
                                        end
                                    end
                                end
                            else
                                item = table.remove(cookedS, 1)
                                if not isAvailable(item) then
                                    for _, replacement in ipairs(ItemsFolder:GetChildren()) do
                                        if replacement.Name == "Cooked Steak" and isAvailable(replacement) then
                                            item = replacement
                                            break
                                        end
                                    end
                                end
                            end
                            if item and isAvailable(item) then
                                stackCooked(item, cellIndex, stackIndex)
                            end
                        end
                    end

                    task.wait(5)
                end
            end)
        end)
    else
        _G.fAssistEnabled = false
    end
end)


GroupTab:AddToggle("aFoodToggle", {
    Title = "Auto Eat",
    Default = true
}):OnChanged(function(state)
    _G.aFoodEnabled = state
    if state then
        task.spawn(function()
            local Players = game:GetService("Players")
            local RepStorage = game:GetService("ReplicatedStorage")
            local LocalPlayer = Players.LocalPlayer
            local RE = RepStorage:WaitForChild("RemoteEvents")
            local ItemsFolder = workspace:WaitForChild("Items")
            local TARGET_NAMES = {"Cooked Morsel", "Cooked Steak"}
            local BACKUP_NAMES = {["Carrot"]=2, ["Corn"]=1, ["Pumpkin"]=1}
            local FOOD_OFFSET = 3
            local HUNGER_THRESHOLD = 150

            local function getTargetFood()
                for _, item in ipairs(ItemsFolder:GetChildren()) do
                    for _, name in ipairs(TARGET_NAMES) do
                        if item.Name == name then
                            local part = item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                            if part and item.Parent then return item, part end
                        end
                    end
                end
                for backupName, qty in pairs(BACKUP_NAMES) do
                    local found = 0
                    for _, item in ipairs(ItemsFolder:GetChildren()) do
                        if item.Name == backupName then
                            found += 1
                            local part = item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                            if part and item.Parent then return item, part end
                        end
                        if found >= qty then break end
                    end
                end
                return nil
            end

            local function makeInvisible(item)
                if item:IsA("Model") then
                    for _, p in ipairs(item:GetDescendants()) do
                        if p:IsA("BasePart") then
                            p.Transparency = 1
                            p.CanCollide = false
                        end
                    end
                elseif item:IsA("BasePart") then
                    item.Transparency = 1
                    item.CanCollide = false
                end
            end

            local function teleportFoodInFront(item, part)
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not hrp or not item or not part or not item.Parent then return end
                local frontPos = hrp.Position + hrp.CFrame.LookVector * FOOD_OFFSET
                if item:IsA("Model") then
                    if not item.PrimaryPart then item.PrimaryPart = part end
                    item:SetPrimaryPartCFrame(CFrame.new(frontPos))
                else
                    part.CFrame = CFrame.new(frontPos)
                end
            end

            local function eatFood(item, part)
                if not item or not part or not item.Parent then return false end
                if item:IsA("Model") and not item.PrimaryPart then item.PrimaryPart = part end
                teleportFoodInFront(item, part)
                makeInvisible(item)
                task.wait(0.02)
                local success = pcall(function() RE.RequestStartDraggingItem:FireServer(item) end)
                task.wait(0.05)
                success = success and pcall(function() RE.RequestConsumeItem:InvokeServer(item) end)
                return success
            end

            while _G.aFoodEnabled do
                task.wait(1)
                local hunger = LocalPlayer:GetAttribute("Hunger") or 200
                if hunger < HUNGER_THRESHOLD then
                    local item, part = getTargetFood()
                    if item and part and item.Parent then
                        local attempts = 0
                        local eaten = false
                        while attempts < 3 and not eaten do
                            if not item.Parent then break end
                            eaten = eatFood(item, part)
                            attempts += 1
                            if not eaten then task.wait(0.2) end
                        end
                    end
                end
            end
        end)
    else
        _G.aFoodEnabled = false
    end
end)

GroupTab:AddToggle("Auto Biofuel", {
    Title = "Auto Biofuel",
    Default = false
}):OnChanged(function(state)
    _G.aBioEnabled = state
    if state then
        task.spawn(function()
            local plr = game.Players.LocalPlayer
            local itemsFolder = workspace:FindFirstChild("Items") or Instance.new("Folder", workspace)
            itemsFolder.Name = "Items"
            local foodItems = {"Carrot","Corn","Pumpkin"}
            local ignoreItems = {"Stew","Seafood Chowder","Steak Dinner","Pumpkin Soup","Barbecue Ribs","Carrot Cake","Jar o Jelly"}
            local biofuelProc = workspace:FindFirstChild("Structures") and workspace.Structures:FindFirstChild("Biofuel Processor")
            local bioTouch = biofuelProc and biofuelProc:FindFirstChild("TouchZone")
            local campfire = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Campground") and workspace.Map.Campground:FindFirstChild("MainFire") and workspace.Map.Campground.MainFire:FindFirstChild("InnerTouchZone")
            if not (bioTouch and campfire) then return end
            local RE = game.ReplicatedStorage:WaitForChild("RemoteEvents")

            local function unanchor(item)
                if item:IsA("Model") then
                    for _,part in ipairs(item:GetDescendants()) do
                        if part:IsA("BasePart") then part.Anchored=false end
                    end
                elseif item:IsA("BasePart") then
                    item.Anchored=false
                end
            end

            local function add3Food()
                local count, done = 0, 0
                for _,item in pairs(itemsFolder:GetChildren()) do
                    if done >= 3 then break end
                    local n = item.Name:lower()
                    local skip = false
                    for _, ign in ipairs(ignoreItems) do if n:find(ign:lower(),1,true) then skip=true break end end
                    if not skip then
                        for _, f in ipairs(foodItems) do
                            if n:find(f:lower()) then
                                pcall(function()
                                    unanchor(item)
                                    local p = bioTouch.Position + Vector3.new(0,15+count,0)
                                    if item:IsA("Model") then
                                        if item.PrimaryPart then item:PivotTo(CFrame.new(p)) else item:MoveTo(p) end
                                    elseif item:IsA("BasePart") then
                                        item.CFrame = CFrame.new(p)
                                    end
                                    unanchor(item)
                                    task.wait(0.02)
                                    RE.RequestStartDraggingItem:FireServer(item)
                                    count += 1
                                    done += 1
                                end)
                                break
                            end
                        end
                    end
                end
            end

            local function moveBiofuel()
                for _,item in ipairs(itemsFolder:GetChildren()) do
                    if item.Name:lower():find("biofuel") then
                        unanchor(item)
                        local targetPos = campfire.Position + Vector3.new(0,15,0)
                        if item:IsA("Model") then
                            if item.PrimaryPart then item:PivotTo(CFrame.new(targetPos)) else item:MoveTo(targetPos) end
                        elseif item:IsA("BasePart") then
                            item.CFrame = CFrame.new(targetPos)
                        end
                        task.wait(0.02)
                        RE.RequestStartDraggingItem:FireServer(item)
                    end
                end
            end

            task.spawn(function() while _G.aBioEnabled do add3Food() task.wait(30) end end)
            task.spawn(function() while _G.aBioEnabled do moveBiofuel() task.wait(5) end end)
        end)
    else
        _G.aBioEnabled = false
    end
end)

GroupTab:AddButton({
    Title = "Manual Eat Food",
    Callback = function()
        local Players = game:GetService("Players")
        local RepStorage = game:GetService("ReplicatedStorage")
        local LocalPlayer = Players.LocalPlayer
        local RE = RepStorage:WaitForChild("RemoteEvents")
        local ItemsFolder = workspace:WaitForChild("Items")
        local TARGET_NAMES = {"Cooked Morsel", "Cooked Steak"}
        local BACKUP_NAMES = {["Carrot"]=2, ["Corn"]=2, ["Pumpkin"]=1}
        local FOOD_OFFSET = 3

        local function getTargetFood()
            for _, item in ipairs(ItemsFolder:GetChildren()) do
                for _, name in ipairs(TARGET_NAMES) do
                    if item.Name == name then
                        local part = item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if part and item.Parent then return item, part end
                    end
                end
            end

            for backupName, qty in pairs(BACKUP_NAMES) do
                local found = 0
                for _, item in ipairs(ItemsFolder:GetChildren()) do
                    if item.Name == backupName then
                        found += 1
                        local part = item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if part and item.Parent then
                            return item, part
                        end
                    end
                    if found >= qty then break end
                end
            end

            return nil
        end

        local function makeInvisible(item)
            if item:IsA("Model") then
                for _, p in ipairs(item:GetDescendants()) do
                    if p:IsA("BasePart") then
                        p.Transparency = 1
                        p.CanCollide = false
                    end
                end
            elseif item:IsA("BasePart") then
                item.Transparency = 1
                item.CanCollide = false
            end
        end

        local function teleportFoodInFront(item, part)
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not hrp or not item or not part or not item.Parent then return end
            local frontPos = hrp.Position + hrp.CFrame.LookVector * FOOD_OFFSET
            if item:IsA("Model") then
                if not item.PrimaryPart then item.PrimaryPart = part end
                item:SetPrimaryPartCFrame(CFrame.new(frontPos))
            else
                part.CFrame = CFrame.new(frontPos)
            end
        end

        local function eatFood(item, part)
            teleportFoodInFront(item, part)
            makeInvisible(item)
            task.wait(0.02)
            pcall(function() RE.RequestStartDraggingItem:FireServer(item) end)
            task.wait(0.01)
            pcall(function() RE.RequestConsumeItem:InvokeServer(item) end)
        end

        local item, part = getTargetFood()
        if item and part then
            eatFood(item, part)
        else
            warn("No food available to eat!")
        end
    end
})


GroupTab:AddButton({
    Title = "Manual Biofuel",
    Callback = function()
        local plr = game.Players.LocalPlayer
        local itemsFolder = workspace:FindFirstChild("Items") or Instance.new("Folder", workspace)
        itemsFolder.Name = "Items"
        local foodItems = {"Carrot","Corn","Pumpkin"}
        local ignoreItems = {"Stew","Seafood Chowder","Steak Dinner","Pumpkin Soup","Barbecue Ribs","Carrot Cake","Jar o Jelly"}
        local biofuelProc = workspace:FindFirstChild("Structures") and workspace.Structures:FindFirstChild("Biofuel Processor")
        local bioTouch = biofuelProc and biofuelProc:FindFirstChild("TouchZone")
        local campfire = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Campground") and workspace.Map.Campground:FindFirstChild("MainFire") and workspace.Map.Campground.MainFire:FindFirstChild("InnerTouchZone")
        if not (bioTouch and campfire) then return end
        local RE = game.ReplicatedStorage:WaitForChild("RemoteEvents")

        local function unanchor(item)
            if item:IsA("Model") then
                for _,part in ipairs(item:GetDescendants()) do
                    if part:IsA("BasePart") then part.Anchored=false end
                end
            elseif item:IsA("BasePart") then
                item.Anchored=false
            end
        end

        local count, done = 0, 0
        for _,item in pairs(itemsFolder:GetChildren()) do
            if done >= 3 then break end
            local n = item.Name:lower()
            local skip = false
            for _, ign in ipairs(ignoreItems) do if n:find(ign:lower(),1,true) then skip=true break end end
            if not skip then
                for _, f in ipairs(foodItems) do
                    if n:find(f:lower()) then
                        pcall(function()
                            unanchor(item)
                            local p = bioTouch.Position + Vector3.new(0,15+count,0)
                            if item:IsA("Model") then
                                if item.PrimaryPart then item:PivotTo(CFrame.new(p)) else item:MoveTo(p) end
                            elseif item:IsA("BasePart") then
                                item.CFrame = CFrame.new(p)
                            end
                            unanchor(item)
                            task.wait(0.02)
                            RE.RequestStartDraggingItem:FireServer(item)
                            count += 1
                            done += 1
                        end)
                        break
                    end
                end
            end
        end

        for _,item in ipairs(itemsFolder:GetChildren()) do
            if item.Name:lower():find("biofuel") then
                unanchor(item)
                local targetPos = campfire.Position + Vector3.new(0,15,0)
                if item:IsA("Model") then
                    if item.PrimaryPart then item:PivotTo(CFrame.new(targetPos)) else item:MoveTo(targetPos) end
                elseif item:IsA("BasePart") then
                    item.CFrame = CFrame.new(targetPos)
                end
                task.wait(0.02)
                RE.RequestStartDraggingItem:FireServer(item)
            end
        end
    end
})

GroupTab:AddButton({
    Title = "Bring Food",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local RS = game:GetService("ReplicatedStorage")
        local plr = Players.LocalPlayer
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local foodItems = {"Cooked Morsel","Cooked Steak"}
        local maxItems = 20

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        local count = 0
        local alreadyTaken = {}

        for _, item in ipairs(itemsFolder:GetChildren()) do
            if count >= maxItems then break end
            for _, name in ipairs(foodItems) do
                if item.Name:find(name) and not alreadyTaken[item] then
                    local part = getPart(item)
                    if part then
                        local targetPos = hrp.Position + hrp.CFrame.LookVector * 5
                        if item:IsA("Model") then
                            item:PivotTo(CFrame.new(targetPos))
                        else
                            part.CFrame = CFrame.new(targetPos)
                        end

                        pcall(function()
                            startDrag:FireServer(item)
                            task.wait(0.1)
                            stopDrag:FireServer(item)
                            task.wait(0.1)
                        end)

                        alreadyTaken[item] = true
                        count += 1
                        break
                    end
                end
            end
        end
    end
})

local MiscTab = Tabs.Misc

local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
itemsFolder.Name = "Items"

local startDrag = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
local stopDrag = RepStorage:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")
local CampfireInner = Workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire"):WaitForChild("InnerTouchZone")

local AFKModeToggle = MiscTab:AddToggle("AFKMode", {Title="AFK Mode", Default=false})
local AFKEnabled = false
local DropInterval = 5

local function getPart(item)
    return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
end

local function dropItemsExact(itemNames, startHeight)
    local heightOffset = startHeight
    for _, item in ipairs(itemsFolder:GetChildren()) do
        for _, name in ipairs(itemNames) do
            if item.Name == name then
                local part = getPart(item)
                if part then
                    local targetPos = CampfireInner.Position + Vector3.new(0, heightOffset, 0)
                    if item:IsA("Model") then
                        item:PivotTo(CFrame.new(targetPos))
                    else
                        part.CFrame = CFrame.new(targetPos)
                    end
                    task.spawn(function()
                        startDrag:FireServer(item)
                        task.wait(0.1)
                        stopDrag:FireServer(item)
                        task.wait(0.1)
                    end)
                    heightOffset += 2
                end
            end
        end
    end
end

AFKModeToggle:OnChanged(function(state)
    AFKEnabled = state
    if AFKEnabled then
        task.spawn(function()
            while AFKEnabled do
                dropItemsExact({"Oil Barrel"}, 15)
                dropItemsExact({"Cultist"}, 25)
                dropItemsExact({"Crossbow Cultist"}, 25)
                task.wait(DropInterval)
            end
        end)
    end
end)

MiscTab:AddButton({
    Title = "Bring Pelt Trader Items",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local RS = game:GetService("ReplicatedStorage")
        local plr = Players.LocalPlayer
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local targetItems = {"Bunny Foot", "Wolf Pelt", "Alpha Wolf Pelt", "Bear Pelt", "Arctic Fox Pelt", "Polar Bear Pelt"}
        local maxPerItem = 5
        local maxSlots = 5
        local spacing = 3
        local slotOffsets = {-spacing*2, -spacing, 0, spacing, spacing*2}
        local slotIndex = 1
        local itemCounts = {}

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        for _, item in ipairs(itemsFolder:GetChildren()) do
            for _, name in ipairs(targetItems) do
                if item.Name:find(name) then
                    if not itemCounts[name] then itemCounts[name] = 0 end
                    if itemCounts[name] < maxPerItem then
                        local part = getPart(item)
                        if part then
                            local right = hrp.CFrame.RightVector
                            local targetPos = hrp.Position + right * slotOffsets[slotIndex]

                            if item:IsA("Model") then
                                item:PivotTo(CFrame.new(targetPos))
                            else
                                part.CFrame = CFrame.new(targetPos)
                            end

                            task.spawn(function()
                                pcall(function()
                                    startDrag:FireServer(item)
                                    task.wait(0.1)
                                    stopDrag:FireServer(item)
                                    task.wait(0.1)
                                end)
                                pcall(function()
                                    startDrag:FireServer(item)
                                    task.wait(0.1)
                                    stopDrag:FireServer(item)
                                end)
                            end)

                            slotIndex += 1
                            if slotIndex > maxSlots then slotIndex = 1 end
                            itemCounts[name] = itemCounts[name] + 1
                        end
                    end
                    break
                end
            end
        end
    end
})

MiscTab:AddButton({
    Title = "Bring Gems & Misc",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local RS = game:GetService("ReplicatedStorage")
        local plr = Players.LocalPlayer
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local targetItems = {
            "Gem of the Forest", 
            "Gem of the Forest Fragment", 
            "Cultist Gem", 
            "Cultist King Antler", 
            "Cultist King Mace",
            "Mammoth Tusk",
            "Scorpion Shell",
            "Raw Obsidiron Ore",
            "Scalding Obsidiron Ingot",
            "Obsidiron Ingot",
            "Meteor Shard",
            "Gold Shard",
            "Feather"
        }

        local ignoreList = {"Cultist", "Crossbow Cultist", "Cultist Prototype", "Cultist Experiment"}
        local alwaysAllow = {
            ["Gem of the Forest"] = true,
            ["Gem of the Forest Fragment"] = true,
            ["Cultist Gem"] = true,
            ["Cultist King Antler"] = true,
            ["Cultist King Mace"] = true,
            ["Mammoth Tusk"] = true
        }

        local maxSlots = 5
        local spacing = 3
        local slotOffsets = {-spacing*2, -spacing, 0, spacing, spacing*2}
        local slotIndex = 1

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        for _, item in ipairs(itemsFolder:GetChildren()) do
            local ignored = false
            if not alwaysAllow[item.Name] then
                for _, v in ipairs(ignoreList) do
                    if item.Name:find(v) then
                        ignored = true
                        break
                    end
                end
            end
            if ignored then continue end

            for _, name in ipairs(targetItems) do
                local matchFound = alwaysAllow[name] and item.Name == name or item.Name:find(name)
                if matchFound then
                    local part = getPart(item)
                    if part then
                        local right = hrp.CFrame.RightVector
                        local targetPos = hrp.Position + right * slotOffsets[slotIndex]

                        if item:IsA("Model") then
                            item:PivotTo(CFrame.new(targetPos))
                        else
                            part.CFrame = CFrame.new(targetPos)
                        end

                        task.spawn(function()
                            pcall(function()
                                startDrag:FireServer(item)
                                task.wait(0.1)
                                stopDrag:FireServer(item)
                                task.wait(0.1)
                            end)
                            pcall(function()
                                startDrag:FireServer(item)
                                task.wait(0.1)
                                stopDrag:FireServer(item)
                            end)
                        end)

                        slotIndex += 1
                        if slotIndex > maxSlots then slotIndex = 1 end
                    end
                    break
                end
            end
        end
    end
})

MiscTab:AddButton({
    Title = "Bring Bandages & MedKits",
    Callback = function()
        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local RS = game:GetService("ReplicatedStorage")
        local plr = Players.LocalPlayer
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local itemsFolder = Workspace:FindFirstChild("Items") or Instance.new("Folder", Workspace)
        itemsFolder.Name = "Items"

        local startDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("RequestStartDraggingItem")
        local stopDrag = RS:WaitForChild("RemoteEvents"):WaitForChild("StopDraggingItem")

        local targetItems = {"Bandage", "MedKit"}
        local maxSlots = 5
        local spacing = 3
        local slotOffsets = {-spacing*2, -spacing, 0, spacing, spacing*2}
        local slotIndex = 1

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        for _, item in ipairs(itemsFolder:GetChildren()) do
            for _, name in ipairs(targetItems) do
                if item.Name:find(name) then
                    local part = getPart(item)
                    if part then
                        local right = hrp.CFrame.RightVector
                        local targetPos = hrp.Position + right * slotOffsets[slotIndex]

                        if item:IsA("Model") then
                            item:PivotTo(CFrame.new(targetPos))
                        else
                            part.CFrame = CFrame.new(targetPos)
                        end

                        task.spawn(function()
                            pcall(function()
                                startDrag:FireServer(item)
                                task.wait(0.1)
                                stopDrag:FireServer(item)
                                task.wait(0.1)
                            end)
                            pcall(function()
                                startDrag:FireServer(item)
                                task.wait(0.1)
                                stopDrag:FireServer(item)
                            end)
                        end)

                        slotIndex += 1
                        if slotIndex > maxSlots then slotIndex = 1 end
                    end
                    break
                end
            end
        end
    end
})

MiscTab:AddButton({
    Title = "Drop Cult Bodies",
    Callback = function()
        local RS = game:GetService("ReplicatedStorage")
        local plr = game.Players.LocalPlayer
        local itemsFolder = workspace:FindFirstChild("Items") or Instance.new("Folder", workspace)
        itemsFolder.Name = "Items"
        local hrp = (plr.Character or plr.CharacterAdded:Wait()):WaitForChild("HumanoidRootPart")
        local RE = RS:WaitForChild("RemoteEvents")
        local startDrag = RE:WaitForChild("RequestStartDraggingItem")
        local stopDrag = RE:WaitForChild("StopDraggingItem")

        local dropList = {"Cultist", "Crossbow Cultist"}
        local ignoreList = {"Cultist Gem", "Cultist Prototype", "Cultist Experiment", "Cultist King Antler"}

        local function getPart(item)
            return item:IsA("BasePart") and item or item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        end

        local dropDistance = 25
        local maxSlots = 5
        local spacing = 3
        local slotOffsets = {-spacing*2, -spacing, 0, spacing, spacing*2}

        local slotIndex = 1

        for _, item in ipairs(itemsFolder:GetChildren()) do
            local name = item.Name
            local ignored = false
            for _, ign in ipairs(ignoreList) do
                if name:lower():find(ign:lower()) then
                    ignored = true
                    break
                end
            end
            if ignored then continue end

            for _, drop in ipairs(dropList) do
                if name:lower():find(drop:lower()) then
                    local part = getPart(item)
                    if part then
                        local forward = hrp.CFrame.LookVector
                        local right = hrp.CFrame.RightVector
                        local targetPos = hrp.Position + forward * dropDistance + right * slotOffsets[slotIndex]

                        if item:IsA("Model") then
                            item:PivotTo(CFrame.new(targetPos))
                        else
                            part.CFrame = CFrame.new(targetPos)
                        end

                        task.spawn(function()
                            pcall(function()
                                startDrag:FireServer(item)
                                task.wait(0.1)
                                stopDrag:FireServer(item)
                                task.wait(0.1)
                            end)
                        end)

                        slotIndex += 1
                        if slotIndex > maxSlots then
                            slotIndex = 1
                        end
                    end
                    break
                end
            end
        end
    end
})

local ChildrenTab = Tabs.Children

local lostChildrenNames = {"Lost Child", "Lost Child2", "Lost Child3", "Lost Child4"}
local LocalPlayer = game:GetService("Players").LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local hasMapRevealed = false

ChildrenTab:AddButton({
    Title = "üåÑ Explore Map",
    Callback = function()
        if hasMapRevealed then return end
        hasMapRevealed = true

        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local originalHRPCFrame = hrp.CFrame
        local mainFire = Workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire"):WaitForChild("InnerTouchZone")
        local CharactersFolder = Workspace:WaitForChild("Characters")

        local speed = 300
        local TweenHeight = 200
        local foundChildren = {}
        local radii = {350, 750, 1000, 1200}
        local startTime = tick()

        local function allChildrenFound()
            for _, name in ipairs(lostChildrenNames) do
                if not foundChildren[name] then return false end
            end
            return true
        end

        local function generateRingPoints(center, radius, step)
            local points = {}
            local segments = math.ceil((2*math.pi*radius)/step)
            for i=0,segments do
                local angle = (i/segments) * 2*math.pi
                local x = center.X + math.cos(angle)*radius
                local z = center.Z + math.sin(angle)*radius
                table.insert(points, Vector3.new(x, center.Y + TweenHeight, z))
            end
            return points
        end

        local function startMapReveal()
            hrp.CFrame = CFrame.new(mainFire.Position + Vector3.new(0, TweenHeight, 0))
            local camera = Workspace.CurrentCamera
            local originalCameraType = camera.CameraType
            local originalCameraSubject = camera.CameraSubject
            camera.CameraType = Enum.CameraType.Scriptable
            local camOffset = Vector3.new(0, TweenHeight, -25)
            local camConnection
            camConnection = RunService.RenderStepped:Connect(function()
                camera.CFrame = CFrame.new(mainFire.Position + camOffset, mainFire.Position)
            end)

            task.spawn(function()
                while not allChildrenFound() do
                    for _, name in ipairs(lostChildrenNames) do
                        if not foundChildren[name] then
                            local npc = CharactersFolder:FindFirstChild(name)
                            if npc and npc:FindFirstChild("HumanoidRootPart") then
                                foundChildren[name] = true
                                print(name.." found!")
                            end
                        end
                    end
                    local elapsed = math.floor(tick() - startTime)
                    print(elapsed.."s")
                    task.wait(1)
                end
            end)

            for _, radius in ipairs(radii) do
                local points = generateRingPoints(mainFire.Position, radius, 50)
                for _, point in ipairs(points) do
                    if allChildrenFound() then break end
                    local distance = (point - hrp.Position).Magnitude
                    local tweenTime = distance / speed
                    local tween = TweenService:Create(hrp, TweenInfo.new(tweenTime, Enum.EasingStyle.Linear), {CFrame = CFrame.new(point)})
                    tween:Play()
                    tween.Completed:Wait()
                end
                if allChildrenFound() then break end
            end

            hrp.Velocity = Vector3.new(0,0,0)
            hrp.RotVelocity = Vector3.new(0,0,0)
            hrp.CFrame = originalHRPCFrame
            camConnection:Disconnect()
            camera.CameraType = originalCameraType
            camera.CameraSubject = originalCameraSubject
        end

        startMapReveal()
    end
})

for _, name in ipairs(lostChildrenNames) do
    ChildrenTab:AddButton({
        Title = "Teleport "..name,
        Callback = function()
            local char = Workspace:FindFirstChild("Characters") and Workspace.Characters:FindFirstChild(name)
            if char and char:FindFirstChild("Head") and LocalPlayer.Character then
                local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.CFrame = char.Head.CFrame + Vector3.new(0,3,0)
                end
            end
        end
    })
end

Tabs.Children:AddButton({
    Title = "Teleport to Campfire",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local fire = workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire"):WaitForChild("InnerTouchZone")
        local offset = Vector3.new(0, 15, 0)
        hrp.CFrame = CFrame.new(fire.Position + offset)
    end
})

local LostChildESPEnabled = false
ChildrenTab:AddToggle("LostChildESP", {
    Title = "ESP Lost Children",
    Default = false
}):OnChanged(function(state)
    LostChildESPEnabled = state
end)

local function createBillboard(parent, name, color)
    if not parent or not parent:FindFirstChild("Head") then return end
    if parent.Head:FindFirstChild(name) then return end
    local billboard = Instance.new("BillboardGui")
    billboard.Name = name
    billboard.Adornee = parent.Head
    billboard.Size = UDim2.new(0, 120, 0, 50)
    billboard.AlwaysOnTop = true
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,1,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = color
    label.TextStrokeTransparency = 0
    label.TextScaled = true
    label.Text = parent.Name
    label.Parent = billboard
    billboard.Parent = parent.Head
    return label
end

local function removeBillboard(parent, name)
    local head = parent:FindFirstChild("Head")
    if head then
        local gui = head:FindFirstChild(name)
        if gui then gui:Destroy() end
    end
end

task.spawn(function()
    while true do
        local charactersFolder = Workspace:FindFirstChild("Characters")
        if charactersFolder then
            for _, name in ipairs(lostChildrenNames) do
                local npc = charactersFolder:FindFirstChild(name)
                if npc then
                    if LostChildESPEnabled then
                        createBillboard(npc, "LostChildESP", Color3.new(1,0,0))
                    else
                        removeBillboard(npc, "LostChildESP")
                    end
                end
            end
        end
        task.wait(0.2)
    end
end)
